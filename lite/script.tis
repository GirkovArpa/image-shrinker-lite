const DEBUGGING = true; 
DEBUGGING && view.connectToInspector && view.connectToInspector(rootElement, inspectorIpAddress);

function self.ready() {
  const w = 340dip;
  const h = 550dip;
  const (sw, sh) = view.screenBox(#frame, #dimension);
  view.move((sw / 2) - (w / 2), (sh / 2) - (h / 2), w, h, false);
  view.windowResizable = true;
  view.windowMaximizable = false;
  movableView("#draggable-caption");
}

$(#ellipses) << event click {
  $(#settings).attributes.toggleClass("open");
}

$(#x) << event click {
  $(#settings).attributes.toggleClass("open");
}

function processFile(filename) {
  if ($(#dropzone).attributes.hasClass("is--processing")) return;
  const filter = [
    "Image Files (*.png,*.jpg,*.jpeg,*.svg,*.gif)|*.png;*.jpg;*.jpeg;*.svg;*.gif",
    "PNG Files (*.png)|*.png",
    "JPG Files (*.jpg,*.jpeg)|*.jpg;*jpeg",
    "SVG Files (*.svg)|*.svg",
    "GIF Files (*.gif)|*.gif"
  ].join("|");
  filename = filename || view.selectFile(#open, filter);
  if (! filename) return;
  const ext = filename %~ ".";
  if (ext != "png") return view.msgbox(#error, "Only PNG images are supported at this time.", "Image Shrinker Lite");
  filename = filename.replace("file://", "");
  $(#dropzone).attributes.addClass("is--processing");
  view.compressPNG(filename, (result) => {
    $(#dropzone).attributes.removeClass("is--processing");
  }); 
}

$(#dropzone) << event click {
  processFile(null);
}